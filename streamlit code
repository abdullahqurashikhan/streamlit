%%writefile app.py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

# Load Iris dataset
iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['species'] = iris.target
species_map = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}

# Train a model
scaler = StandardScaler()
X = scaler.fit_transform(data.iloc[:, :-1])
y = data['species']
model = RandomForestClassifier(random_state=42)
model.fit(X, y)

# Streamlit app
st.title("Iris Flower Species Classifier")
st.write("This app predicts the species of an Iris flower based on its features.")

# Input fields for user data
st.header("Input Flower Measurements")
sepal_length = st.number_input("Sepal Length (cm)", min_value=0.0, max_value=10.0, value=5.0, step=0.1)
sepal_width = st.number_input("Sepal Width (cm)", min_value=0.0, max_value=10.0, value=3.0, step=0.1)
petal_length = st.number_input("Petal Length (cm)", min_value=0.0, max_value=10.0, value=1.5, step=0.1)
petal_width = st.number_input("Petal Width (cm)", min_value=0.0, max_value=10.0, value=0.2, step=0.1)

# Prediction button
if st.button("Predict"):
    # Prepare the input for the model
    input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
    input_data_scaled = scaler.transform(input_data)
    
    # Get prediction
    prediction = model.predict(input_data_scaled)[0]
    prediction_species = species_map[prediction]

    # Display result
    st.success(f"The predicted species is: **{prediction_species}**")

# Show example dataset
if st.checkbox("Show Iris Dataset"):
    st.write(data)
